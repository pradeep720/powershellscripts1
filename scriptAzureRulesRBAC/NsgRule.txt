Param(
    [String]$EnvironmentName,
    [String]$ruleName,
    [String]$myIp
)

#cool 

$connection = Get-AutomationConnection -Name AzureRunAsConnection

Connect-AzAccount -ServicePrincipal `
    -Tenant $connection.TenantID `
    -ApplicationId $connection.ApplicationID `
    -CertificateThumbprint $connection.CertificateThumbprint 
 
 $ErrorActionPreference = 'Stop'

#Important
#every time you have to change priority. same priority cannot be  created. 

$nsgs =  Get-AzResource -ResourceGroupName msapi-$EnvironmentName-RG -ResourceType "Microsoft.Network/networkSecurityGroups" | Get-AzNetworkSecurityGroup 

foreach($nsg in $nsgs){
   
        try
        {
            $ruleExists = (Get-AzNetworkSecurityRuleConfig -NetworkSecurityGroup $nsg).Name.Contains($ruleName);
        }
        catch
        {
            Write-Verbose "[ $ruleExists ] not valid"
              Write-Error 'Caught an Exception' -ErrorAction 'Continue'
        }

    
           $RG = $nsg | Select ResourceGroupName
  
if($ruleExists){

   Write-output("$ruleName already exits in $RG");

 
}else{

# Add the inbound security rule.
$nsg | Add-AzNetworkSecurityRuleConfig -Name $ruleName -Description "Allow app port" -Access "Allow" `
    -Protocol TCP -Direction Inbound -Priority 3896 -SourceAddressPrefix $myIp -SourcePortRange * `
    -DestinationAddressPrefix * -DestinationPortRange 3389

# Update the NSG.
$nsg | Set-AzNetworkSecurityGroup
 Write-output("$ruleName created in $RG");
}
}
# sourcecode from there - https://docs.microsoft.com/en-us/azure/service-fabric/scripts/service-fabric-powershell-add-nsg-rule 